---
- name: autoremediaton playbook
  hosts: all
  vars:
      commentuser: "Ansible Playbook"

  tasks:
    - name: push comment to dynatrace
      uri:
        url: "{{dtcommentapiurl}}"
        method: POST
        body_format: json
        body: "{ \"comment\": \"Evaluating the issue.\", \"user\": \"{{commentuser}}\", \"context\": \"Ansible Tower\" }"
      when: state == "OPEN"


    - name: fetch deployment events (if any)
      uri:
        url: "{{dtdeploymentapiurl}}"
        return_content: yes
      with_items: "{{ impactedEntities }}"
      when: state == "OPEN"
      register: customproperties
      ignore_errors: no

    - name: parse deployment events
      when: state == "OPEN"
      set_fact:
        deployment_events: "{{item.json.events}}"
      with_items: "{{ customproperties.results }}"
      register: deployment_events

    - name: get most recent deployment
      when: state == "OPEN"
      set_fact:
        myItem: "{{ deployment_events | first }}"

    - name: root-cause identified
      uri:
       url: "{{ dtcommentapiurl }}"
       method: POST
       body_format: json
       body: "{\"comment\": \"Looks like the deployment triggered the issue. Rolling back to earlier build.\",\"user\": \" {{commentuser}}\",\"context\": \"Ansible Tower\"}"

    - name: stop the latest deployed docker
      docker_container:
        name: SampleBankApp
        image: nikhilgoenka/sample-bank-app:1.0
        state: absent
      when: state == "OPEN"
      ignore_errors: yes
      register: result

    - name: rollback to earlier docker
      docker_container:
        name: SampleBankApp
        image: nikhilgoenka/sample-bank-app:latest
        ports:
          - 3000:3000
        state: started
      when: state == "OPEN"

    - name: push success comment to dynatrace
      uri:
        url: "{{dtcommentapiurl}}"
        method: POST
        body_format: json
        body: "{\"comment\": \"Applied remediation action successfully. Validating the new deployment.\", \"user\": \"{{commentuser}}\",\"context\": \"Ansible Tower\"}"
      when: state == "OPEN"
      
    - name: "update deployment information"
      uri:
        url: "{{dtdeploymentapiurl}}"
        body_format: json
        method: POST
        body: '{ 
           "eventType": "CUSTOM_DEPLOYMENT", 
           "attachRules": 
             { 
             "tagRule" : 
                [{ 
                   "meTypes" : ["SERVICE"], 
                   "tags" : 
                   [ 
                      { 
                         "context" : "CONTEXTLESS", 
                         "key" : "My_service" 
                      } 
                   ]
                }] },
                "deploymentName":"Rolling back the 1.0 build",
                "deploymentVersion":"latest",
                "remediationAction":"revert-changes.yaml",
                "source":"Ansible",
                "customProperties":
                {
                  "CI Tool": "Ansible Tower",
                  "Current docker version (tag value) ": "1.0",
                  "Upgrading to docker version (tag value)": "latest" 
                }
             }'
             
    - name: "start load test for rollback"
      uri:
        url: "{{dtdeploymentapiurl}}"
        body_format: json
        method: POST
        body: '{ 
           "eventType": "CUSTOM_ANNOTATION", 
           "attachRules": 
             { 
             "tagRule" : 
                [{ 
                   "meTypes" : ["SERVICE"], 
                   "tags" : 
                   [ 
                      { 
                         "context" : "CONTEXTLESS", 
                         "key" : "My_service" 
                      } 
                   ]
                }] },
                "source":"Ansible-playbook",
                "annotationDescription":"Starting load test as part of rollback process.",
                "annotationType":"Notification"
             }'
    - name: "Fire requests to verify if the application is working as expected"
      uri:
        url: http://{{my_ip}}:3000/api/users/
        method: GET
      with_sequence: count="50"
      
    - name: "stop load test"
      uri:
        url: "{{dtdeploymentapiurl}}"
        body_format: json
        method: POST
        body: '{ 
           "eventType": "CUSTOM_ANNOTATION", 
           "attachRules": 
             { 
             "tagRule" : 
                [{ 
                   "meTypes" : ["SERVICE"], 
                   "tags" : 
                   [ 
                      { 
                         "context" : "CONTEXTLESS", 
                         "key" : "My_service" 
                      } 
                   ]
                }] },
                "source":"Ansible-playbook",
                "annotationDescription":"Stopping load test that was started for rollback process",
                "annotationType":"Notification"
             }'
             
    - name: push success comment to dynatrace
      uri:
        url: "{{dtcommentapiurl}}"
        method: POST
        body_format: json
        body: "{ \"comment\": \"Rollback and load test completed. Will wait for Davis AI to validate and close the problem.\", \"user\": \"{{commentuser}}\", \"context\": \"Ansible Tower\" }"
      when: state == "OPEN"

